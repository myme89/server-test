name: ci-test

on:
  push:
    # branches: ["master"]
    tags:
      - "v*"

  release:
      types: [created]

jobs:
  test:
    name: Test
    runs-on: [self-hosted, linux]

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:15
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1
          POSTGRES_DB: postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8
        env:
          MYSQL_USER: nhatnt
          MYSQL_PASSWORD: 1
          MYSQL_ROOT_PASSWORD: 1
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 3

      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: mongo
          MONGO_INITDB_ROOT_PASSWORD: 1
          MONGO_INITDB_DATABASE: data
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.20
        id: go

      - name: Test
        run: make test

      # - name: Release
      #   uses: softprops/action-gh-release@v1

        # with:
        #   token: ${{ secrets.CUSTOM_KEY }}
        #   repository: ${{ secrets.REPO }}

      # - name: Get file 
      #   run: |
      #     sudo apt-get install curl
      #     sudo apt-get install zip
      #     mkdir Release 
      #     curl -L -o Source_code.zip $(curl -s ${{ secrets.PATH_RELEASE }} | grep "tarball_url" | cut -d : -f 2,3 | tr -d \" |tr -d \,)
      #     curl -L -o Source_code.tag.gz $(curl -s ${{ secrets.PATH_RELEASE }} | grep "zipball_url" | cut -d : -f 2,3 | tr -d \" |tr -d \,)
      #     mv Source_code.zip Source_code.tag.gz Release/
      #     zip -r release.zip Release
      
      # - name: Upload to gdrive
      #   uses: adityak74/google-drive-upload-git-action@main
      #   with:
      #     credentials: ${{ secrets.CREDENTIALS }}
      #     filename: release.zip
      #     folderId: ${{ secrets.FOLDERID }}
      #     name: Release ${{ github.ref}} # optional string
      #     overwrite: "true" # optional boolean

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'

    - name: Build and Release
      run: |
        go build -ldflags="-X 'main.version=${{ github.ref }}' -X 'main.commit=${{ github.sha }}'" -o server-test
        echo "::set-output name=binpath::server-test"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false  

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.binpath }}
        asset_name: server-test-${{ github.ref }}-{{ matrix.os }}-{{ matrix.arch }}.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}