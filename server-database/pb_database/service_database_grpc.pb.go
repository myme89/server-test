// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service_database.proto

package pb_database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	SignUpAcc(ctx context.Context, in *SignUpAccResquest, opts ...grpc.CallOption) (*SignUpAccRespone, error)
	LoginAcc(ctx context.Context, in *LoginAccResquest, opts ...grpc.CallOption) (*LoginAccRespone, error)
	UploadFile(ctx context.Context, in *UploadFileResquest, opts ...grpc.CallOption) (*UploadFileRespone, error)
	GetListUploadFile(ctx context.Context, in *GetListFileResquest, opts ...grpc.CallOption) (*GetListFileRespone, error)
	ExportTemplateFile(ctx context.Context, in *ExportTemplateFileResquest, opts ...grpc.CallOption) (*ExportTemplateFileRespone, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) SignUpAcc(ctx context.Context, in *SignUpAccResquest, opts ...grpc.CallOption) (*SignUpAccRespone, error) {
	out := new(SignUpAccRespone)
	err := c.cc.Invoke(ctx, "/pb_database.Database/SignUpAcc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) LoginAcc(ctx context.Context, in *LoginAccResquest, opts ...grpc.CallOption) (*LoginAccRespone, error) {
	out := new(LoginAccRespone)
	err := c.cc.Invoke(ctx, "/pb_database.Database/LoginAcc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) UploadFile(ctx context.Context, in *UploadFileResquest, opts ...grpc.CallOption) (*UploadFileRespone, error) {
	out := new(UploadFileRespone)
	err := c.cc.Invoke(ctx, "/pb_database.Database/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetListUploadFile(ctx context.Context, in *GetListFileResquest, opts ...grpc.CallOption) (*GetListFileRespone, error) {
	out := new(GetListFileRespone)
	err := c.cc.Invoke(ctx, "/pb_database.Database/GetListUploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) ExportTemplateFile(ctx context.Context, in *ExportTemplateFileResquest, opts ...grpc.CallOption) (*ExportTemplateFileRespone, error) {
	out := new(ExportTemplateFileRespone)
	err := c.cc.Invoke(ctx, "/pb_database.Database/ExportTemplateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	SignUpAcc(context.Context, *SignUpAccResquest) (*SignUpAccRespone, error)
	LoginAcc(context.Context, *LoginAccResquest) (*LoginAccRespone, error)
	UploadFile(context.Context, *UploadFileResquest) (*UploadFileRespone, error)
	GetListUploadFile(context.Context, *GetListFileResquest) (*GetListFileRespone, error)
	ExportTemplateFile(context.Context, *ExportTemplateFileResquest) (*ExportTemplateFileRespone, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (UnimplementedDatabaseServer) SignUpAcc(context.Context, *SignUpAccResquest) (*SignUpAccRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpAcc not implemented")
}
func (UnimplementedDatabaseServer) LoginAcc(context.Context, *LoginAccResquest) (*LoginAccRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAcc not implemented")
}
func (UnimplementedDatabaseServer) UploadFile(context.Context, *UploadFileResquest) (*UploadFileRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedDatabaseServer) GetListUploadFile(context.Context, *GetListFileResquest) (*GetListFileRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUploadFile not implemented")
}
func (UnimplementedDatabaseServer) ExportTemplateFile(context.Context, *ExportTemplateFileResquest) (*ExportTemplateFileRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTemplateFile not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_SignUpAcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpAccResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).SignUpAcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_database.Database/SignUpAcc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).SignUpAcc(ctx, req.(*SignUpAccResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_LoginAcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAccResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).LoginAcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_database.Database/LoginAcc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).LoginAcc(ctx, req.(*LoginAccResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_database.Database/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).UploadFile(ctx, req.(*UploadFileResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetListUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFileResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetListUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_database.Database/GetListUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetListUploadFile(ctx, req.(*GetListFileResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_ExportTemplateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTemplateFileResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).ExportTemplateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_database.Database/ExportTemplateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).ExportTemplateFile(ctx, req.(*ExportTemplateFileResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_database.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpAcc",
			Handler:    _Database_SignUpAcc_Handler,
		},
		{
			MethodName: "LoginAcc",
			Handler:    _Database_LoginAcc_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Database_UploadFile_Handler,
		},
		{
			MethodName: "GetListUploadFile",
			Handler:    _Database_GetListUploadFile_Handler,
		},
		{
			MethodName: "ExportTemplateFile",
			Handler:    _Database_ExportTemplateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_database.proto",
}
