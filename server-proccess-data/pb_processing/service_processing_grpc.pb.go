// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service_processing.proto

package pb_processing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessingClient is the client API for Processing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessingClient interface {
	TestData2(ctx context.Context, in *DataInfoTestResquest1, opts ...grpc.CallOption) (*DataInfoTestRespone1, error)
	ProcessingFileExcel(ctx context.Context, in *ProcessingFileResquest, opts ...grpc.CallOption) (*ProcessingFileRespone, error)
}

type processingClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessingClient(cc grpc.ClientConnInterface) ProcessingClient {
	return &processingClient{cc}
}

func (c *processingClient) TestData2(ctx context.Context, in *DataInfoTestResquest1, opts ...grpc.CallOption) (*DataInfoTestRespone1, error) {
	out := new(DataInfoTestRespone1)
	err := c.cc.Invoke(ctx, "/pb_storage.Processing/TestData2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processingClient) ProcessingFileExcel(ctx context.Context, in *ProcessingFileResquest, opts ...grpc.CallOption) (*ProcessingFileRespone, error) {
	out := new(ProcessingFileRespone)
	err := c.cc.Invoke(ctx, "/pb_storage.Processing/ProcessingFileExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessingServer is the server API for Processing service.
// All implementations must embed UnimplementedProcessingServer
// for forward compatibility
type ProcessingServer interface {
	TestData2(context.Context, *DataInfoTestResquest1) (*DataInfoTestRespone1, error)
	ProcessingFileExcel(context.Context, *ProcessingFileResquest) (*ProcessingFileRespone, error)
	mustEmbedUnimplementedProcessingServer()
}

// UnimplementedProcessingServer must be embedded to have forward compatible implementations.
type UnimplementedProcessingServer struct {
}

func (UnimplementedProcessingServer) TestData2(context.Context, *DataInfoTestResquest1) (*DataInfoTestRespone1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestData2 not implemented")
}
func (UnimplementedProcessingServer) ProcessingFileExcel(context.Context, *ProcessingFileResquest) (*ProcessingFileRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessingFileExcel not implemented")
}
func (UnimplementedProcessingServer) mustEmbedUnimplementedProcessingServer() {}

// UnsafeProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessingServer will
// result in compilation errors.
type UnsafeProcessingServer interface {
	mustEmbedUnimplementedProcessingServer()
}

func RegisterProcessingServer(s grpc.ServiceRegistrar, srv ProcessingServer) {
	s.RegisterService(&Processing_ServiceDesc, srv)
}

func _Processing_TestData2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataInfoTestResquest1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessingServer).TestData2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_storage.Processing/TestData2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessingServer).TestData2(ctx, req.(*DataInfoTestResquest1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processing_ProcessingFileExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingFileResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessingServer).ProcessingFileExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_storage.Processing/ProcessingFileExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessingServer).ProcessingFileExcel(ctx, req.(*ProcessingFileResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// Processing_ServiceDesc is the grpc.ServiceDesc for Processing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_storage.Processing",
	HandlerType: (*ProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestData2",
			Handler:    _Processing_TestData2_Handler,
		},
		{
			MethodName: "ProcessingFileExcel",
			Handler:    _Processing_ProcessingFileExcel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_processing.proto",
}
